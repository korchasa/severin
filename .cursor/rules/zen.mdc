---
description:
globs:
alwaysApply: true
---
## Zen of Development

1. **Write clean, focused code**
   Remove anything unnecessary.

2. **Be clear, not clever**
   Use meaningful names and avoid hidden tricks.

3. **Start simple**
   Build the easiest version that works before adding complexity.

4. **Only add complexity when needed**
   Use patterns or frameworks only if simple code can't do the job.

5. **Keep structures shallow**
   Avoid deep folder trees or class chains.

6. **Use whitespace well**
   Space helps code breathe and makes logic easier to spot.

7. **Make code easy to read**
   Others will spend more time reading your code than you did writing it.

8. **Follow the rules**
   Stick to the style guide, even for edge cases.

9. **Be practical, not perfect**
   Clean code matters—but shipping useful code matters more.

10. **Show errors clearly**
    Don't hide problems—log them or return them.

11. **Silence errors only on purpose**
    If you must ignore one, explain why and how it's safe.

12. **Keep the project healthy**
    Fix failing tests, linter issues, and missing parts.

13. **Don't guess—check**
    Read docs, search online, or test it out.

14. **Stick to one standard way**
    Use common patterns others will recognize.

15. **Point out tricky parts**
    Leave notes for anything hard to spot.

16. **Work fast, not sloppy**
    Move quickly, but still test and review.

17. **Love simple ideas**
    If you can explain your design easily, it's probably good.

18. **Refactor confusing designs**
    If it's hard to explain, it's probably too complex.

19. **Use and organize code smartly**
    Reuse libraries and keep your own code modular.